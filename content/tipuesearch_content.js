var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁: \xa0 https://manto8.github.io/wcm-2024/ \n 網誌: https://manto8.github.io/wcm-2024/blog \xa0 \n 簡報: https://manto8.github.io/wcm-2024/reveal \xa0 \n 倉儲: https://github.com/Manto8/wcm-2024 \n', 'tags': '', 'url': 'About.html'}, {'title': '作業', 'text': '', 'tags': '', 'url': '作業.html'}, {'title': 'W6', 'text': '', 'tags': '', 'url': 'W6.html'}, {'title': 'Git的發展歷史', 'text': 'ChatGPT 回答: \n Git 的发展历史可以追溯到2005年，由 Linux 内核的创建者 Linus Torvalds 开发。以下是 Git 的主要发展历程： \n \n \n 2005年 ：Git 诞生。Linus Torvalds 在 Linux 内核社区中开始开发 Git，因为他对现有的版本控制系统不满意，并需要一个更好的系统来管理 Linux 内核的开发。他在Linux内核邮件列表上发布了 Git 的首个版本。 \n \n \n 2007年 ：GitHub 成立。GitHub 是一个基于 Git 的代码托管平台，为开发者提供了一个集中的位置来存储、共享和协作开发代码。GitHub 的出现进一步推动了 Git 的普及和发展。 \n \n \n 2008年 ：Git 1.5.6 发布。这个版本引入了 Git 的子模块功能，允许开发者将一个 Git 仓库嵌套在另一个仓库中。 \n \n \n 2012年 ：GitHub 用户突破200万。GitHub 在这一年宣布拥有超过200万的代码库，证明了 Git 和 GitHub 在开发社区中的影响力和普及程度。 \n \n \n 2016年 ：微软收购 GitHub。微软宣布以75亿美元的价格收购 GitHub，这进一步提高了 GitHub 的价值和影响力，并将其纳入微软的生态系统中。 \n \n \n 2018年 ：Git 2.18 发布。这个版本带来了一些新功能和改进，如新的追踪分支切换策略，以提高性能和用户体验。 \n \n \n 2020年 ：GitHub 支持更改默认分支名称。GitHub 宣布支持将存储库的默认分支从 "master" 更改为更中性的名称，如 "main"，以避免潜在的种族主义问题。 \n \n \n 总的来说，Git 作为一个强大的分布式版本控制系统，经过多年的发展已成为开发者和团队不可或缺的工具之一。其开放、灵活和高效的特性使得它在软件开发、文档管理和团队协作等领域都得到了广泛应用和认可。 \n', 'tags': '', 'url': 'Git的發展歷史.html'}, {'title': 'Git的基本用法', 'text': 'ChatGPT 回答: \n Git 的基本用法涵盖了许多方面，包括初始化仓库、添加文件、提交更改、查看状态和历史记录、创建分支、合并分支、远程操作等。以下是 Git 的基本用法的简要介绍： \n \n \n 初始化仓库 ： 在开始一个新项目时，您需要在项目目录中初始化 Git 仓库。使用以下命令： \n \n git  init   \n \n \n \n 添加文件 ： 将要进行版本控制的文件添加到 Git 仓库中。例如，添加所有文件： \n \n git  add  .  \n \n \n \n 提交更改 ： 提交添加的文件或已修改的文件到仓库中，创建一个新的版本记录： \n \n git  commit   - m "Your commit message"  \n \n \n \n 查看状态和历史记录 ： 可以随时查看仓库的状态和提交历史。查看当前状态： \n \n git  status   \n \n 查看提交历史记录： \n \n git  log   \n \n \n \n 创建分支 ： 分支可以让您在不影响主要代码的情况下进行实验或开发新功能。创建分支： \n \n git branch  < branch_name >   \n \n \n \n 切换分支 ： 切换到新创建的分支： \n \n git checkout  < branch_name >   \n \n \n \n 合并分支 ： 将一个分支的更改合并到当前分支： \n \n git merge  < branch_name >   \n \n \n \n 远程操作 ： 如果您使用 Git 托管服务（如 GitHub、GitLab 等），可以与远程仓库进行交互。例如，将本地仓库连接到远程仓库： \n \n git remote  add  origin <remote_repository_URL>  \n \n 推送更改到远程仓库： \n \n git  push  origin <branch_name>  \n \n \n \n 这些是 Git 的基本用法，涵盖了开始一个新项目、追踪和提交更改、查看项目状态和历史记录、创建和合并分支以及与远程仓库交互等基本操作。随着对 Git 的熟悉程度的提高，您将能够更深入地利用 Git 的功能来管理项目和协作开发。 \n \n \n \n', 'tags': '', 'url': 'Git的基本用法.html'}, {'title': 'Codespaces', 'text': '', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};